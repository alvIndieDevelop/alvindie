{"version":3,"sources":["pages/landingPage/LandingPage.js","App.js","serviceWorker.js","utils/customTheme.js","index.js"],"names":["withStyles","theme","root","display","height","menu","flex","padding","concat","spacing","unit","backgroundColor","justifyContent","avatar","background","backgroundSize","width","borderRadius","boxShadow","shadows","landing","flexGrow","palette","common","white","props","classes","react_default","a","createElement","react","index_es","className","in","direction","mountOnEnter","unmountOnExit","timeout","style","transitionDelay","variant","App","Switch","Route","exact","path","component","LandingPage","Boolean","window","location","hostname","match","customTheme","createMuiTheme","type","ReactDOM","render","styles","myTheme","BrowserRouter","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OA8DeA,uBA1DA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJC,QAAS,OACTC,OAAQ,SAEVC,KAAM,CACJC,KAAM,WACNC,QAAO,GAAAC,OAAKP,EAAMQ,QAAQC,KAAnB,OAAAF,OAAkD,EAArBP,EAAMQ,QAAQC,KAA3C,MACPC,gBAAiB,UACjBR,QAAS,OACTS,eAAgB,UAElBC,OAAQ,CACNC,WAAU,8EACVC,eAAgB,cAChBX,OAAQ,IACRY,MAAO,IACPC,aAAc,MACdC,UAAWjB,EAAMkB,QAAQ,IAE3BC,QAAS,CACPC,SAAU,EACVP,WAAU,sEACVC,eAAgB,QAChBJ,gBAAiBV,EAAMqB,QAAQC,OAAOC,SAkC3BxB,CA9BK,SAAAyB,GAAS,IACnBC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAAA,OAAKG,UAAWN,EAAQxB,MACtByB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEE,IAAI,EACJC,UAAU,QACVC,cAAY,EACZC,eAAa,EACbC,QAAS,IACTC,MAAO,CAAEC,gBAAiB,MAE1BZ,EAAAC,EAAAC,cAAA,OAAKG,UAAWN,EAAQrB,MACtBsB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKG,UAAWN,EAAQb,SACxBc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYS,QAAQ,SAApB,8BAINb,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAME,IAAI,EAAMI,QAAS,IAAMC,MAAO,CAAEC,gBAAiB,MACvDZ,EAAAC,EAAAC,cAAA,OAAKG,UAAWN,EAAQN,eC3CnBqB,EANH,kBACVd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWC,MCInBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECVSC,EANKC,yBAAe,CACjChC,QAAS,CACPiC,KAAM,UCKVC,IAASC,OACP9B,EAAAC,EAAAC,cAAC6B,EAAA,iBAAD,CAAkBzD,MAAO0D,GACvBhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAeC,SAAUC,aACvBnC,EAAAC,EAAAC,cAACkC,EAAD,QAGJC,SAASC,eAAe,SFkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9a0d769f.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { CssBaseline, Typography, Fade, Slide } from \"@material-ui/core\";\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n    height: \"100vh\"\n  },\n  menu: {\n    flex: \"0 0 auto\",\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 4}px`,\n    backgroundColor: \"#212121\",\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  avatar: {\n    background: `rgba(0,0,0,0) url(\"images/PorfileAlvaroMartin.png\") no-repeat center center`,\n    backgroundSize: \"250px 250px\",\n    height: 200,\n    width: 200,\n    borderRadius: \"50%\",\n    boxShadow: theme.shadows[5]\n  },\n  landing: {\n    flexGrow: 1,\n    background: `rgba(0,0,0,0) url(\"images/LogoAlvaro2.png\") no-repeat center center`,\n    backgroundSize: \"cover\",\n    backgroundColor: theme.palette.common.white\n  }\n});\n\nconst LandingPage = props => {\n  const { classes } = props;\n  return (\n    <Fragment>\n      <CssBaseline />\n      <div className={classes.root}>\n        <Slide\n          in={true}\n          direction=\"right\"\n          mountOnEnter\n          unmountOnExit\n          timeout={1000}\n          style={{ transitionDelay: 1000 }}\n        >\n          <div className={classes.menu}>\n            <div>\n              <div className={classes.avatar} />\n              <br />\n              <Typography variant=\"title\">Alvaro Martin Caballero</Typography>\n            </div>\n          </div>\n        </Slide>\n        <Fade in={true} timeout={3000} style={{ transitionDelay: 2000 }}>\n          <div className={classes.landing} />\n        </Fade>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(LandingPage);\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\n// pages\nimport LandingPage from \"./pages/landingPage/LandingPage\";\n\nconst App = () => (\n  <Switch>\n    <Route exact path={\"/\"} component={LandingPage} />\n  </Switch>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core\";\n\nconst customTheme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nexport default customTheme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { MuiThemeProvider } from \"@material-ui/core\";\nimport myTheme from \"./utils/customTheme\";\n\nReactDOM.render(\n  <MuiThemeProvider theme={myTheme}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </MuiThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}